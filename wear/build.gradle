plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'de.michelinside.glucodatahandler'
    compileSdk rootProject.compileSdk

    defaultConfig {
        applicationId "de.michelinside.glucodatahandler"
        minSdk rootProject.minSdk
        targetSdk rootProject.targetSdk
        versionCode rootProject.versionCode
        versionName rootProject.versionName
    }

    buildTypes {
        release {
            // Enable ProGuard
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "GlucoDataHandler"
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            resValue "string", "app_name", "GDH Debug"
        }
        second {
            applicationIdSuffix '.second'
            versionNameSuffix '-SECOND'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "GDH Second"
        }
        applicationVariants.all {
                // this method is use to rename your all apk weather
                // it may be signed or unsigned(debug apk)
            variant ->
                variant.outputs.each {
                        // on below line we are setting a
                        // name to our apk as GlucoDataHandler.apk
                    output ->
                        def name = "GlucoDataHandler-Wear_" + versionName + ".apk"
                        // on below line we are setting the
                        // outputFile Name to our apk file.
                        output.outputFileName = name
                }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'com.google.android.gms:play-services-wearable:18.1.0'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.wear:wear:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation project(path: ':common')
    implementation 'androidx.wear.watchface:watchface-complications-data-source-ktx:1.1.1'
    implementation 'androidx.wear.watchface:watchface-complications-rendering:1.1.1'
    implementation 'androidx.appcompat:appcompat-resources:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
}

afterEvaluate {
    //noinspection ConfigurationAvoidance
    def assembleRelease = tasks.getByPath(':wear:assembleRelease')
    def copyAndroidApksPostBuild = tasks.register('copyAndroidApksPostBuild', Copy) {
        dependsOn assembleRelease
        from "${projectDir}/release"
        include '**/*.apk'
        into rootProject.releasePath
    }
    assembleRelease.finalizedBy(copyAndroidApksPostBuild)

    //noinspection ConfigurationAvoidance
    def assembleSecond = tasks.getByPath(':wear:assembleSecond')
    def copyAndroidSecondApksPostBuild = tasks.register('copyAndroidSecondApksPostBuild', Copy) {
        dependsOn assembleSecond
        from "${projectDir}/second"
        include '**/*.apk'
        into rootProject.releasePath
    }
    assembleSecond.finalizedBy(copyAndroidSecondApksPostBuild)
}